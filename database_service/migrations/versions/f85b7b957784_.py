"""empty message

Revision ID: f85b7b957784
Revises: d2c3cd3b7d9f
Create Date: 2024-02-01 14:02:50.651090

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = 'f85b7b957784'
down_revision: Union[str, None] = 'd2c3cd3b7d9f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_before_insert_book_check = PGFunction(
        schema="public",
        signature="before_insert_book_check()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        IF NOT EXISTS (SELECT 1 FROM authors WHERE author_id = NEW.author_id) THEN\n            RAISE EXCEPTION 'Несуществующий ID автора --> %', NEW.author_id USING HINT = 'Проверьте ваш ID автора';\n        END IF;\n        RETURN NEW;\n    END; $$ language 'plpgsql'"
    )
    op.replace_entity(public_before_insert_book_check)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_before_insert_book_check = PGFunction(
        schema="public",
        signature="before_insert_book_check()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n    BEGIN\n        IF NOT EXISTS (SELECT 1 FROM book_author_association WHERE author_id = NEW.author_id) THEN\n            RAISE EXCEPTION 'Несуществующий ID автора --> %', NEW.author_id USING HINT = 'Проверьте ваш ID автора';\n        END IF;\n        RETURN NEW;\n    END; $function$"
    )
    op.replace_entity(public_before_insert_book_check)
    # ### end Alembic commands ###
